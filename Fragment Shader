#version 400 core

in vec3 vColour;			// Interpolated colour using colour calculated in the vertex shader
in vec2 vTexCoord;			// Interpolated texture coordinate using texture coordinate from the vertex shader

out vec4 vOutputColour;		// The output colour

uniform sampler2D sampler0;  // The texture sampler
uniform bool bUseTexture;    // A flag indicating if texture-mapping should be applied

in vec4 p;					// vEyePosition coming from the vertex shader
in vec3 n;					// vEyeNorm coming from the vertex shader


uniform float t;													// time variable used in the discard effect

uniform int mode;													// 'mode' allow the change between bright and dark mode

uniform bool frag;													// 'frag' determines whether the discard effect is allowed or not

float rho = 0.01f;													// value used for the fog effect

vec3 fogColour = vec3(0.25,0.875f,0.8125);							// the selected values apply the turquoise color to the fog

// Structure holding light information:  its position as well as ambient, diffuse, and specular colours
struct LightInfo
{
	vec4 position;
	vec3 La;
	vec3 Ld;
	vec3 Ls;
	
	vec3 direction;
	float exponent;
	float cutoff;
};

// Structure holding material information:  its ambient, diffuse, and specular colours, and shininess
struct MaterialInfo
{
	vec3 Ma;
	vec3 Md;
	vec3 Ms;
	float shininess;
};

// Lights and materials passed in as uniform variables from client programme
uniform LightInfo light1; 
uniform LightInfo light2;
uniform MaterialInfo material1;





vec3 PhongModel(vec4 eyePosition, vec3 eyeNorm)
{
	vec3 s = normalize(vec3(light1.position - eyePosition));
	vec3 v = normalize(-eyePosition.xyz);
	vec3 r = reflect(-s, eyeNorm);
	vec3 n = eyeNorm;
	vec3 ambient = light1.La * material1.Ma;
	float sDotN = max(dot(s, n), 0.0);
	vec3 diffuse = light1.Ld * material1.Md * sDotN;
	vec3 specular = vec3(0.0);
	float eps = 0.000001; // add eps to shininess below -- pow not defined if second argument is 0 (as described in GLSL documentation)
	if (sDotN > 0.0) 
		specular = light1.Ls * material1.Ms * pow(max(dot(r, v), 0.0), material1.shininess + eps);
	
	return ambient + diffuse + specular;

}

vec3 BlinnPhongSpotlightModel(vec4 eyePosition, vec3 eyeNorm, LightInfo light)
{
	vec3 s = normalize(vec3(light.position - eyePosition));
	float angle = acos(dot(-s, light.direction));
	float cutoff = radians(clamp(light.cutoff, 0.0, 90.0));
	vec3 ambient = light.La * material1.Ma;
	if (angle < cutoff) {
		float spotFactor = pow(dot(-s, light.direction), light.exponent);
		vec3 v = normalize(-eyePosition.xyz);
		vec3 h = normalize(v + s);
		float sDotN = max(dot(s, eyeNorm), 0.0);
		vec3 diffuse = light.Ld * material1.Md * sDotN;
		vec3 specular = vec3(0.0);
		if (sDotN > 0.0)
			specular = light.Ls * material1.Ms * pow(max(dot(h, eyeNorm), 0.0), material1.shininess);
		return ambient + spotFactor * (diffuse + specular);
	} else
		return ambient;
}




uniform bool fogEnabled;

void main()
{
	
	
	// Get the texel colour from the texture sampler
	vec4 vTexColour = texture(sampler0, vTexCoord);	
	vec3 vColour;

	if ( (frag) && (vTexColour.r > fract(t)) ) discard;							// DISCARD EFFECT !

		float d = length(p.xyz);												// These two lines implement the fog effect
		float w = exp(-rho*d);



	switch(mode){
		case 0:
			vColour = PhongModel(p, normalize(n));
			break;
		
		case 1:
			//spotlights
			vColour = BlinnPhongSpotlightModel(p, normalize(n), light1);
			vColour += BlinnPhongSpotlightModel(p, normalize(n), light2);
			break;
	
	}



	

	if ((bUseTexture)  )
		vOutputColour = vTexColour*vec4(vColour, 1.0f);	// Combine object colour and texture 

	else 
		vOutputColour = vec4(vColour, 1.0f);	// Just use the colour instead
	

	if (fogEnabled)
	
			vOutputColour.rgb = mix(fogColour, vOutputColour.rgb, w);			//	FOG EFFECT !
	
	
}
